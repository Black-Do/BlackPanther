#include<GL/glut.h>
#include<iostream>
#include<cmath>
using namespace std;

class shape
{
public:
  virtual void draw()=0;
  virtual void move(float dx,float dy)=0;
  };
  
class ball:public shape
{
float x,y;
float radius;
public:
  ball(float x1=0.0,float y1=0.0,float rad=0.1)
  {
  x=x1;
  y=y1;
  radius=rad;
  }
  
  void draw() override
  {
  glBegin(GL_TRIANGLE_FAN);
  glColor3f(1.0,0.0,0.0);
  glVertex2f(x,y);
  for(int i=0;i<=360;i+=10)
  {
  float ang=i*3.14159/180;
  glVertex2f(x+radius*cos(ang),y+radius*sin(ang));
  }
 
  glEnd();
  }
  
  void move(float dx,float dy) override
  {
  x+=dx;
  y+=dy;
  }
  };
  
  ball b1(0.0,0.0,0.1);
  
  void display()
  {
  glClear(GL_COLOR_BUFFER_BIT);
  b1.draw();
  glFlush();
  }
  
void keys(int key,int x,int y)
{
switch(key)
{
case GLUT_KEY_UP:
b1.move(0.0,0.05);
break;

case GLUT_KEY_DOWN:
b1.move(0.0,-0.05);
break;

case GLUT_KEY_RIGHT:
b1.move(0.05,0.0);
break;

case GLUT_KEY_LEFT:
b1.move(-0.05,0.0);
break;
}
glutPostRedisplay();
}

int main(int argc,char** argv)
{
glutInit(&argc,argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize(500,500);

glutCreateWindow("Ball");
glClearColor(0.0,0.0,0.0,0.0);
glMatrixMode(GL_PROJECTION);
gluOrtho2D(-1.0,1.0,-1.0,1.0);
glutDisplayFunc(display);
glutSpecialFunc(keys);
glutMainLoop();
return 0;
}


