
#include <iostream>
#include<GL/glut.h>
using namespace std;

float bcolor[3];
float fcolor[3];

int round (float a) {return (int) (a+0.5);}

void DDALine(int x1, int y1, int x2, int y2) {
	int dx = x2 - x1; 
	int dy = y2 - y1;
	int steps;
	
	if (abs(dx)>abs(dy)) {steps = abs(dx);}
	else {steps = abs(dy);}
	
	float xinc = dx/(float)steps;
	float yinc = dy/(float)steps;
	
	float x = x1, y = y1;
	
	glBegin(GL_POINTS);
	glVertex2d(x,y);
	
	for (int i = 0; i < steps; i++) {
		x = x+xinc;
		y = y+yinc;
		glVertex2d(round(x),round(y));
	}
	glEnd();
	glFlush();
}

void BoundaryFill(int x, int y) {
	float color[3];
	glReadPixels(x,y,1,1,GL_RGB,GL_FLOAT, color); //color is variable
	if ((color[0] != bcolor[0] || color[1] != bcolor[1] || color[2] != bcolor[2]) && ((color[0] != fcolor[0] || color[1] != fcolor[1] || color[2] != fcolor[2]))) {
		glBegin(GL_POINTS);
		glColor3f(fcolor[0],fcolor[1],fcolor[2]);
		glVertex2d(x,y);
		glEnd();
		glFlush();
		BoundaryFill(x+1,y);
		BoundaryFill(x,y+1);
		BoundaryFill(x-1,y);
		BoundaryFill(x,y-1);
	}
}

void Draw() {
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(bcolor[0],bcolor[1], bcolor[2]);
	DDALine(100,100,300,100);
	DDALine(300,100,300,300);
	DDALine(100,300,300,300);
	DDALine(100,300,100,100);
	BoundaryFill(200,200);
}

int main(int argc, char** argv) {
	for (int i = 0; i < 3; i++) {
		cout << "Enter boundary color location " << i << " : ";
		cin >> bcolor[i];
	}
	for (int i = 0; i < 3; i++) {
		cout << "Enter fill color location " << i << " : ";
		cin >> fcolor[i];
	}
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
	glutInitWindowPosition(0,0);
	glutInitWindowSize(800,600);
	glutCreateWindow("win");
	glClearColor(0,0,0,0);
	gluOrtho2D(0,800,0,600);
	glutDisplayFunc(Draw);
	glutMainLoop();
	return 0;
}